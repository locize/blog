<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>locize - localization as a service</title>
  
  
  <link href="http://blog.locize.com/atom.xml" rel="self"/>
  
  <link href="http://blog.locize.com/"/>
  <updated>2021-04-12T08:36:26.470Z</updated>
  <id>http://blog.locize.com/</id>
  
  <author>
    <name>inweso GmbH</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>What&#39;s new in locize</title>
    <link href="http://blog.locize.com/2020-12-02-new-locize/"/>
    <id>http://blog.locize.com/2020-12-02-new-locize/</id>
    <published>2020-12-01T23:00:00.000Z</published>
    <updated>2021-04-12T08:36:26.470Z</updated>
    
    <content type="html"><![CDATA[<p><img src="title.jpg" title="locize © inweso GmbH"></p><p>A lot of work may be virtual now, but that doesn’t mean we’ve slowed down! In fact, we spent the last months working on a new locize version with a bunch of fabulous updates. Here&#39;s a run-down of some of the most important tweaks that make a huge difference.</p><h1 id="Modernized-UI"><a href="#Modernized-UI" class="headerlink" title="Modernized UI"></a>Modernized UI</h1><p>First of all, you will notice locize looks different. The layout is a little less angular and a little more rounded.There are more icons and more charts. This makes it look friendlier, simpler, and tidier.<img src="overview.jpg" title="locize © inweso GmbH"></p><p>The layout is composed by different cards. Each card has optional additional functionality in the top right corder.<img src="card.jpg" title="locize © inweso GmbH"></p><h1 id="Different-parts"><a href="#Different-parts" class="headerlink" title="Different parts"></a>Different parts</h1><p>The application was rewritten from the ground up and now splits into two major parts.</p><h2 id="Project-pages"><a href="#Project-pages" class="headerlink" title="Project pages"></a>Project pages</h2><p>The project pages consists of details and actions about your versions, languages, namespaces, etc.</p><p>There&#39;s also an optional card about your orders and another card about your branched projects (crowdbased and localistars)<img src="orders.jpg" title="locize © inweso GmbH"><img src="branches.jpg" title="locize © inweso GmbH"></p><p>We moved everything related to the development to a dedicated page, containing development settings, api keys and relevant metrics. There&#39;s also the possibility to configure a webhook or integrate slack.<img src="dev.jpg" title="locize © inweso GmbH"></p><h2 id="CAT-pages"><a href="#CAT-pages" class="headerlink" title="CAT pages"></a>CAT pages</h2><p>The other major part is the new computer aided translation tool – short CAT. The new CAT tool comes with three separate views, for:</p><h3 id="Global-overview"><a href="#Global-overview" class="headerlink" title="Global overview"></a>Global overview</h3><p>With global imports and exports, add, copy or delete keys, search and filter.<img src="cat-overview.jpg" title="locize © inweso GmbH"></p><h3 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a>Translation</h3><p>Focus on translating, assisted by machine translation (MT), smart translation memory (TM), consistency checks, and more.<img src="translation.jpg" title="locize © inweso GmbH"></p><h3 id="InContext-editing"><a href="#InContext-editing" class="headerlink" title="InContext editing"></a>InContext editing</h3><p>The InContext Editor just needs a little script (<a href="https://github.com/locize/locize">locize</a> or <a href="https://github.com/locize/locizify">locizify</a>) added to your site, so it can exchange information (clicked text, saved changes, etc.).<img src="incontext.jpg" title="locize © inweso GmbH"></p><h3 id="Find-more-information-in-the-documentation"><a href="#Find-more-information-in-the-documentation" class="headerlink" title="Find more information in the documentation"></a><a href="https://docs.locize.com/different-views">Find more information in the documentation</a></h3><h1 id="New-features"><a href="#New-features" class="headerlink" title="New features"></a>New features</h1><p>The new locize app does not only come with a new fresh look – but also brings you a ton of new awesome features, like the review workflow or the key history.</p><h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p>You can enable the review workflow for specific languages.<img src="set-review.jpg" title="locize © inweso GmbH"></p><p>This way each time someone changes a translation, it will start a review workflow.The actual value will not be changed until someone will accept one of the translation proposals.<img src="review.jpg" title="locize © inweso GmbH"></p><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><p>The last translation changes are audited per key.<img src="history.jpg" title="locize © inweso GmbH"></p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>To make it short – every aspect of the old experience was analyzed and improved to give you an even better experience.</p><p>The only thing we did not change was the price.</p><p>You get all the new features without any increase of costs.</p><p><em>If you got any questions, feedback or suggestions – we would love to hear from you at <a href="mailto:support@locize.com">support@locize.com</a>.</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;title.jpg&quot; title=&quot;locize © inweso GmbH&quot;&gt;&lt;/p&gt;
&lt;p&gt;A lot of work may be virtual now, but that doesn’t mean we’ve slowed down! In f</summary>
      
    
    
    
    <category term="Post" scheme="http://blog.locize.com/categories/Post/"/>
    
    
    <category term="locize" scheme="http://blog.locize.com/tags/locize/"/>
    
    <category term="localization" scheme="http://blog.locize.com/tags/localization/"/>
    
    <category term="internationalization" scheme="http://blog.locize.com/tags/internationalization/"/>
    
    <category term="translation" scheme="http://blog.locize.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>Stay ahead of the game with localistars</title>
    <link href="http://blog.locize.com/2020-06-13-localistars/"/>
    <id>http://blog.locize.com/2020-06-13-localistars/</id>
    <published>2020-06-12T22:00:00.000Z</published>
    <updated>2021-04-12T08:36:21.737Z</updated>
    
    <content type="html"><![CDATA[<p><img src="title.jpg" title="locize © inweso GmbH"></p><p>While you can let your translation done by freelancers or inhouse employees using locize itself you also got the options to directly order translations from inside locize.With the existing integrations we weren&#39;t that happy. That&#39;s one of the reasons why we decided to integrate a complete new marketplace platform, which works in a more fair way.</p><h1 id="Welcome-localistars"><a href="#Welcome-localistars" class="headerlink" title="Welcome localistars!"></a>Welcome localistars!</h1><p>localistars is the go-to marketplace for clients and translators to get translation jobs done.As client you&#39;ll find translators and as translator you&#39;ll find translation jobs.<strong>Direct contact, no middleman – just collaborating!</strong></p><p><img src="https://localistars.com/img/localistars_logo.svg" alt="localistars logo"></p><h1 id="How-is-localistars-different"><a href="#How-is-localistars-different" class="headerlink" title="How is localistars different?"></a>How is localistars different?</h1><p>As we know how hard it can be to have a solid and working localization process between developers and technical editors / translators, our mission is to offer a platform where everybody is efficient to do its own work and everybody is happy.</p><p>localistars is completely in line with locize&#39;s mission: &quot;Bridging the gap between translation and development&quot;</p><p><a href="https://www.localistars.com/for-clients.html">With localistars you&#39;re in direct contact with the translator</a> – it&#39;s your project, you hold the reins. In contrast to other services localistars don&#39;t set the price and forward the contract to the cheapest translator to maximize the profit. You choose the translator for your projects yourself, it&#39;s your contractor.</p><h2 id="Find-the-best-offer"><a href="#Find-the-best-offer" class="headerlink" title="Find the best offer"></a>Find the best offer</h2><p>Choose the best fitting translators.As client you accept bids based on price and experience of the translator.</p><h2 id="Direct-contact"><a href="#Direct-contact" class="headerlink" title="Direct contact"></a>Direct contact</h2><p>There is no middleman – you get direct access to the experts. No annoying text monitoring or filtering.As client you may choose to collaborate with the same translators for future projects and grow your own team.</p><h3 id="Translators-are-in-the-actors"><a href="#Translators-are-in-the-actors" class="headerlink" title="Translators are in the actors"></a>Translators are in the actors</h3><p>If you are a translator or copywriter (freelancer or agency) who enjoys working autonomously, then localistars is the perfect platform for you - localistars is about you.Find new clients with ease. More time to do the meaningful work, less time wasted on searching and contracting. Overall localistars is your chance to increase your income.</p><h2 id="Content-centric"><a href="#Content-centric" class="headerlink" title="Content-centric"></a>Content-centric</h2><p>It&#39;s all about the content. Projects are set-up with content in mind so the localistars can work together effectively.Clients want to reach their global audience while translators want to choose from diverse tasks. We heard you both.</p><h2 id="Risk-free-payment"><a href="#Risk-free-payment" class="headerlink" title="Risk-free payment"></a>Risk-free payment</h2><p>Clients will only be charged if they approve the content provided by a translator.As a localistar you don&#39;t need to worry about your payment.Translators always get paid on approval.</p><h1 id="Getting-started-with-localistars"><a href="#Getting-started-with-localistars" class="headerlink" title="Getting started with localistars"></a>Getting started with localistars</h1><p>Getting started is simple – the first step is to <a href="https://www.localistars.app/">signup or signin on localistars</a>. Set up your profile and your organisation. Then follow <a href="https://docs.locize.com/guides-tips-and-tricks/working-with-translators/localistars">this guide</a>.</p><p><strong>Check out the <a href="https://youtu.be/WobsZ_er0I4"><em>video</em></a> and be a localistar!</strong></p><div class="video-container"><iframe src="https://www.youtube.com/embed/WobsZ_er0I4" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;title.jpg&quot; title=&quot;locize © inweso GmbH&quot;&gt;&lt;/p&gt;
&lt;p&gt;While you can let your translation done by freelancers or inhouse employees usi</summary>
      
    
    
    
    <category term="Post" scheme="http://blog.locize.com/categories/Post/"/>
    
    
    <category term="locize" scheme="http://blog.locize.com/tags/locize/"/>
    
    <category term="localization" scheme="http://blog.locize.com/tags/localization/"/>
    
    <category term="internationalization" scheme="http://blog.locize.com/tags/internationalization/"/>
    
    <category term="service" scheme="http://blog.locize.com/tags/service/"/>
    
    <category term="localistars" scheme="http://blog.locize.com/tags/localistars/"/>
    
    <category term="order" scheme="http://blog.locize.com/tags/order/"/>
    
    <category term="translation" scheme="http://blog.locize.com/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>A tale of the last 10 years in web development</title>
    <link href="http://blog.locize.com/2018-08-28-a-tale-of-the-last-10-years-in-web-development/"/>
    <id>http://blog.locize.com/2018-08-28-a-tale-of-the-last-10-years-in-web-development/</id>
    <published>2018-08-27T22:00:00.000Z</published>
    <updated>2018-08-28T07:18:33.000Z</updated>
    
    <content type="html"><![CDATA[<div class="img-100"><img src="title.png" alt="" title="locize © inweso GmbH"></div><blockquote><p>This is a work of fiction. Names, characters, businesses, places, events, locales, and incidents depicted in this story are either the products of my imagination or used in a fictitious manner. Any resemblance to actual persons, living or dead, or actual events is purely coincidental.</p></blockquote><h1 id="An-Introduction"><a href="#An-Introduction" class="headerlink" title="An Introduction"></a>An Introduction</h1><p>This story is based on a true story of each of us. Over the past 10 years, many web developers have experienced such a journey. Starting from <a href="https://jquery.com/" target="_blank" rel="external">jQuery</a>, passing through <a href="https://angular.io/" target="_blank" rel="external">Angular</a>, using <a href="https://reactjs.org/" target="_blank" rel="external">React</a> and streak <a href="https://vuejs.org/" target="_blank" rel="external">Vue</a>.</p><p>When reading, “darker areas” of the beginnings of single page applications (SPA) are undergone. This can cause unwanted nervous muscle twitches from the past.</p><p>For risks and side effects read the package leaflet <em>(there is none)</em> and consult your doctor or pharmacist <em>(I don’t know if they could understand)</em>.</p><hr><p>Once upon a time, in spring 2008 in a small company in Sheffield, there was a software developer called Dorian. He was working on a desktop application built with <a href="https://www.microsoft.com/net/download/dotnet-framework-runtime" target="_blank" rel="external">Microsoft .NET</a>.<br>Not far from there, in Rotherham, Shaun worked in a similar company as web developer.<br>Both companies were very similar and sometimes even had the same customers. So it happened that the top management of both companies met and they merged.<br>Patty, who had been promoted to development manager, had the task to assemble a new web development team. After she had already inducted Shaun into her team, she also found Dorian and noticed a possible team change.<br>She beat him an offer and Dorian joined straight the team in Rotherham.<br>For Dorian, professional development with Javascript was something new. He’d learned Javascript during his studies, but he’d used it rather than animate a website.<br>Shaun, on the other hand, even showed him how to handle <a href="https://nodejs.org/" target="_blank" rel="external">node.js</a> and linux and mac. Dorian had always only worked with Windows so far. And from Javascript in the backend he was quite astonished and surprised.<br>Patty saw the first weeks relaxed and felt that she was uniting these two, the right thing.</p><p>Soon it was time to productively implement a new web application. Together, they decided to try to use <a href="https://nodejs.org/" target="_blank" rel="external">node.js</a> in the backend and <a href="https://jquery.com/" target="_blank" rel="external">jQuery</a> in the frontend.<br>They did choose <a href="https://jquery.com/" target="_blank" rel="external">jQuery</a> because the support of the community was great, it made DOM manipulation painless, played well with <a href="https://en.wikipedia.org/wiki/Ajax_%28programming%29" target="_blank" rel="external">AJAX</a>, made basic animation a piece of cake, had a lot of plug-ins, etc…<br>Since the web application was not only for English speaking users, they used <a href="https://github.com/i18next/jquery-i18next" target="_blank" rel="external">jquery-i18next</a> as an internationalization (i18n) library.</p><script src="https://gist.github.com/adrai/14c32d1a5269c03bc42fe0683235296b.js" alt="https://github.com/adrai/i18next-main-differentiator/tree/master/jquery"></script><p><em>To see how this could look like click</em> <a href="https://adrai.github.io/i18next-main-differentiator/jquery/" target="_blank" rel="external"><em>here</em></a><em>.</em></p><hr><p>After about 3 to 4 years, the first signs of weakness of the web application began.<br>There were overusing big/clever plugins, had big/complex files and polluted the global namespace.<br>The heavy use of long chains of selectors (<em>“ul#leftnav li p a.current“</em>) made the code brittle.<br>They started to lose track of what’s where because of the neat idea to use <em>.data()</em> to attach data to the DOM elements, to track the page state.<br>Everything started being slow…<br>Patty had new major features in the pipeline. But the team, which had problems to grow, recommended a refactoring phase.<br>Quickly the team got support from 2 freelancers, Serge and Martina. Patty introduced the new ones as “the experts”.<br>Serge and Martina had <a href="https://angular.io/" target="_blank" rel="external">Angular</a> know-how and persuaded everyone to replace the <a href="https://jquery.com/" target="_blank" rel="external">jQuery</a> solution with <a href="https://angular.io/" target="_blank" rel="external">Angular</a>.<br>Their arguments sounded promising:<br>Instead of unobtrusive Javascript with selectors, now declarative templates.<br>From semantic HTML, to semantic models. Instead of classic separation of concerns (HTML, CSS, JS), the usage of MVC pattern. No plug-ins but directives. <em>$scope</em> instead of closure.<br>Instead of manual DOM manipulation and binding, modern data binding. Less “spaghetti” code and more dependency injection. From unorganized, to modular service architecture.</p><p>Because <a href="https://www.i18next.com" target="_blank" rel="external">i18next</a> was not only built for <a href="https://jquery.com/" target="_blank" rel="external">jQuery</a>, they could use <a href="https://github.com/i18next/ng-i18next" target="_blank" rel="external">ng-i18next</a> and at least keep the same configuration and use the same <a href="https://github.com/adrai/i18next-main-differentiator/tree/master/locales" target="_blank" rel="external">localization files</a> as before!</p><script src="https://gist.github.com/adrai/54e3d4b2356dfd6934b4842f7c7b4dfc.js" alt="https://github.com/adrai/i18next-main-differentiator/tree/master/angular"></script><p><em>To see how this could look like click</em> <a href="https://adrai.github.io/i18next-main-differentiator/angular/" target="_blank" rel="external"><em>here</em></a><em>.</em></p><hr><p>During the next 3 to 4 years, Patty added more freelancers and contractors to the team.<br>Shaun and Dorian started to recognize that making the simplest features work seems a struggle.<br>There were more and more performance and complexity issues.<br>Directives, services and filters theoretically were available, but ultimately, everything was built around controllers and their two-way bound <em>$scope</em>.<br>Angular seemed to be fine for the beginning, when it was a simple application, but as the frontend application grew in complexity, this led to the <a href="https://toddmotto.com/no-scope-soup-bind-to-controller-angularjs/" target="_blank" rel="external">scope soup problem</a> amongst other issues.<br>Additionally, the fear of <a href="https://angular.io/" target="_blank" rel="external">Angular</a> 2’s release was on the horizon. By trying some samples, Shaun said:</p><blockquote><p><em>“Is this still Angular?”</em></p></blockquote><p>In the meantime, the backend had turned into a solid foundation based on DDD, CQRS and event sourcing.<br>During a late-night beer, Dorian told Shaun about <a href="https://reactjs.org/" target="_blank" rel="external">React</a> and <a href="https://redux.js.org/" target="_blank" rel="external">Redux</a>. He said that when he read about <a href="https://reactjs.org/" target="_blank" rel="external">React</a>, <a href="https://redux.js.org/" target="_blank" rel="external">Redux</a> and FLUX he immediately felt that this was a natural fit to the existing backend.<br>Finally, they convinced Patty to rewrite the whole frontend with these arguments:</p><p><img src="react.gif" alt="" title="https://blog.gisspan.com"></p><ul><li><a href="https://angular.io/" target="_blank" rel="external">Angular</a> was a framework vs. <a href="https://reactjs.org/" target="_blank" rel="external">React</a> was a library</li><li>the more flexible state management with <a href="https://redux.js.org/" target="_blank" rel="external">Redux</a></li><li>virtual DOM, one-way data flow, PropTypes and a well-defined component lifecycle</li><li>the obvious natural fit with their backend</li><li>single source of truth</li><li><a href="https://jsx.github.io/" target="_blank" rel="external">JSX</a>, a natural evolution of Javascript</li><li><a href="https://reactjs.org/" target="_blank" rel="external">React</a> has faster learning curve. It feels like learning faster.</li></ul><p>As with the last technology change, this time there was an <a href="https://www.i18next.com" target="_blank" rel="external">i18next</a> option. Just used the new <a href="https://react.i18next.com/" target="_blank" rel="external">react-i18next</a> library and still the same <a href="https://github.com/adrai/i18next-main-differentiator/tree/master/locales" target="_blank" rel="external">localization files</a>!</p><script src="https://gist.github.com/adrai/78ac88e6dd61b4249c05b535e896de35.js" alt="https://github.com/adrai/i18next-main-differentiator/tree/master/react"></script><p><em>To see how this could look like click</em> <a href="https://adrai.github.io/i18next-main-differentiator/react/" target="_blank" rel="external"><em>here</em></a><em>.</em></p><hr><p>Around the year 2018, many freelancers and contractors were no longer in the team. Instead of them now younger developers started to ask for something new…</p><blockquote><p><em>“</em><a href="https://reactjs.org/" target="_blank" rel="external"><em>React</em></a> <em>is ok, but what’s about</em> <a href="https://vuejs.org/" target="_blank" rel="external"><em>Vue</em></a><em>?”</em></p></blockquote><p>Shaun and Dorian organized a little technical session and they explained that <a href="https://reactjs.org/" target="_blank" rel="external">React</a> and <a href="https://vuejs.org/" target="_blank" rel="external">Vue</a> had more similarities than differences:</p><ul><li>both were fast and lightweight</li><li>both had a component based architecture</li><li>both used a virtual DOM</li><li>both could be dropped into a single HTML file or be a module in a more sophisticated <a href="https://webpack.js.org/" target="_blank" rel="external">webpack</a> setup</li><li>both had separate router and state management libraries</li></ul><p>Long talk short, the session ended with the following sentence by Shaun:</p><blockquote><p>“Ok, let’s try to write our web app in <a href="https://vuejs.org/" target="_blank" rel="external">Vue</a> and create a PoC…”</p></blockquote><p>Whether they’ve really switched to <a href="https://vuejs.org/" target="_blank" rel="external">Vue</a>, we do not know, but what we know is that if that’s the case, then they’re sure to use <a href="https://github.com/panter/vue-i18next" target="_blank" rel="external">vue-i18next</a> or a similar library.</p><script src="https://gist.github.com/adrai/54ccddbabbba736e0460c1f01e546179.js" alt="https://github.com/adrai/i18next-main-differentiator/tree/master/vue"></script><p><em>To see how this could look like click</em> <a href="https://adrai.github.io/i18next-main-differentiator/vue/" target="_blank" rel="external"><em>here</em></a><em>.</em></p><hr><p><a href="https://www.i18next.com" target="_blank" rel="external">i18next</a> was right:</p><blockquote><p>“learn once — translate everywhere”!</p></blockquote><p><strong><em>Technologies and libraries come and go, but</em></strong> <a href="https://www.i18next.com" target="_blank" rel="external"><strong><em>i18next</em></strong></a> <strong><em>remains!</em></strong></p><h3 id="Post-credits-scene"><a href="#Post-credits-scene" class="headerlink" title="Post-credits scene"></a>Post-credits scene</h3><p>There are voices who say that they have also replaced their <a href="https://github.com/i18next/i18next-xhr-backend" target="_blank" rel="external">i18next-xhr-backend</a> with that of <a href="https://github.com/locize/i18next-locize-backend" target="_blank" rel="external">locize</a>.</p><p><em>To see how this could look like look at</em> <a href="https://youtu.be/kw-GEQbgmSc" target="_blank" rel="external"><em>this video</em></a><a href="https://youtu.be/kw-GEQbgmSc%29.*" target="_blank" rel="external"><em>.</em></a></p><div class="video-container"><iframe src="//www.youtube.com/embed/kw-GEQbgmSc" frameborder="0" allowfullscreen></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;img-100&quot;&gt;
&lt;img src=&quot;title.png&quot; alt=&quot;&quot; title=&quot;locize © inweso GmbH&quot;&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a work of fiction. Names, ch</summary>
      
    
    
    
    <category term="Post" scheme="http://blog.locize.com/categories/Post/"/>
    
    
    <category term="locize" scheme="http://blog.locize.com/tags/locize/"/>
    
    <category term="localization" scheme="http://blog.locize.com/tags/localization/"/>
    
    <category term="internationalization" scheme="http://blog.locize.com/tags/internationalization/"/>
    
    <category term="i18next" scheme="http://blog.locize.com/tags/i18next/"/>
    
    <category term="web" scheme="http://blog.locize.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>locize - Translation Software Distinguished by Platform for SaaS Reviews as a Great User Experience and Rising Star for 2018</title>
    <link href="http://blog.locize.com/2018-04-30-locize-double-win-2018-for-translation-software/"/>
    <id>http://blog.locize.com/2018-04-30-locize-double-win-2018-for-translation-software/</id>
    <published>2018-04-29T22:00:00.000Z</published>
    <updated>2019-03-07T13:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Efficient localization need not to be expensive, disorganized, and time-consuming for development and localization teams. We designed locize with this core ideas in mind, and a popular software review platform has recently recognized our efforts and affirmed that we have succeeded in our endeavor. FinancesOnline recently distinguished <a href="https://reviews.financesonline.com/p/locize/" target="_blank" rel="external">locize</a> with the <strong>Great User Experience</strong> and <strong>Rising Star</strong> awards for 2018 due to our localization and internationalization software’s capability to satisfy the large demands of global businesses. </p><p><img src="User-Experience2018.png" alt="" title="locize © inweso GmbH"></p><p>locize earned FinancesOnline’s <strong>Great User Experience</strong> award under their <a href="https://translation.financesonline.com/" target="_blank" rel="external">best translation software</a> for our offering an incredibly pleasing to use software for continuously localizing all kinds of languages and software. Project versioning for easy tracking of file changes, multiple file management and project progress tracking through the dashboard, and third-party integrations are some of the factors that contributed to this award. Their experts also praised our platform’s flexibility and responsiveness reflecting all translations on one’s website by simply embedding a single line of code, a feature that makes locize among the best <a href="https://financesonline.com/top-10-alternatives-one-hour-translation-popular-translation-software-solutions/" target="_blank" rel="external">translation software competitors</a>. This also negates the need for manual inputting of all translations.</p><p><img src="Risign-Star2018.png" alt="" title="locize © inweso GmbH"></p><p>The FinancesOnline review team also regarded locize as a <strong>Rising Star</strong> for 2018 due to our highly positive traction with clients. It isn’t a surprise to see our software receive this distinction after FinancesOnline wrote positive remarks in their locize review such as <em>“cost-effective”</em>, <em>“always safe”</em> content thanks to our two-factor authentication, and accelerated and streamlined localization processes. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Efficient localization need not to be expensive, disorganized, and time-consuming for development and localization teams. We designed loc</summary>
      
    
    
    
    <category term="Post" scheme="http://blog.locize.com/categories/Post/"/>
    
    
    <category term="locize" scheme="http://blog.locize.com/tags/locize/"/>
    
    <category term="continuous localization" scheme="http://blog.locize.com/tags/continuous-localization/"/>
    
    <category term="award" scheme="http://blog.locize.com/tags/award/"/>
    
  </entry>
  
  <entry>
    <title>Is your software ready for localization?</title>
    <link href="http://blog.locize.com/2018-02-23-is-your-software-ready-for-localization/"/>
    <id>http://blog.locize.com/2018-02-23-is-your-software-ready-for-localization/</id>
    <published>2018-02-22T23:00:00.000Z</published>
    <updated>2018-08-28T07:03:39.000Z</updated>
    
    <content type="html"><![CDATA[<div class="img-100"><img src="title.png" alt="" title="locize © inweso GmbH"></div><blockquote><p>So you want people from all around the world to use and understand your software...</p><p>...but how to achieve that?</p></blockquote><h2 id="Which-format-should-I-use"><a href="#Which-format-should-I-use" class="headerlink" title="Which format should I use?"></a>Which format should I use?</h2><p>Think about the workflow of exporting strings of the software, having them translated and then importing them back into your software. This will give you many ideas on how to structure your strings.</p><p>Sometimes the used library already pretends a format.</p><h4 id="For-web-projects-for-example-this-can-be"><a href="#For-web-projects-for-example-this-can-be" class="headerlink" title="For web projects for example this can be:"></a>For web projects for example this can be:</h4><ul><li>JSON (i.e. used by <a href="https://i18next.com" target="_blank" rel="external">i18next</a>)</li><li>ICU Message syntax (i.e. used by <a href="https://formatjs.io/" target="_blank" rel="external">formatjs</a>)</li><li>...</li></ul><h4 id="For-mobile-projects-for-example-this-can-be"><a href="#For-mobile-projects-for-example-this-can-be" class="headerlink" title="For mobile projects for example this can be:"></a>For mobile projects for example this can be:</h4><ul><li>Localizable.strings (i.e. used by iOS)</li><li>XML String Resource (i.e. used by Android)</li><li>...</li></ul><h4 id="For-system-apps-for-example-this-can-be"><a href="#For-system-apps-for-example-this-can-be" class="headerlink" title="For system apps for example this can be:"></a>For system apps for example this can be:</h4><ul><li>Java properties files (i.e. used by Java)</li><li>ResX files (i.e. used by .Net)</li><li>...</li></ul><h2 id="Do-you-hardcode-text-strings-in-the-source-code"><a href="#Do-you-hardcode-text-strings-in-the-source-code" class="headerlink" title="Do you hardcode text strings in the source code?"></a>Do you hardcode text strings in the source code?</h2><p>Resource files should store all text used in the software; do not leave text strings hardcoded!Just don&#39;t!</p><h2 id="Can-the-order-of-variables-in-localized-strings-be-changed"><a href="#Can-the-order-of-variables-in-localized-strings-be-changed" class="headerlink" title="Can the order of variables in localized strings be changed?"></a>Can the order of variables in localized strings be changed?</h2><p>Implement a token system to ensure nouns, verbs, etc. can be placed in unique order by language.Different languages needs to know more information about the context. For example for pluralization or gender.The Italian language for example relies on gender. The words in the sentence change depending on whether you&#39;re talking about a man or a woman.Polish suppose you have a singular and then you have a different plural depending on whether the number of things ends with 2, 3 and 4 or some other digit.And Romanian need a different plural for any group of objects greater than 20.</p><h2 id="Does-the-interface-allow-for-long-translations"><a href="#Does-the-interface-allow-for-long-translations" class="headerlink" title="Does the interface allow for long translations?"></a>Does the interface allow for long translations?</h2><p>What about long translations in areas with single line text? Are there areas with multi-line text in your software?Sentences that take five syllables in English actually take a whole two paragraph description in some other language.</p><h2 id="Do-you-use-unique-string-IDs"><a href="#Do-you-use-unique-string-IDs" class="headerlink" title="Do you use unique string IDs?"></a>Do you use unique string IDs?</h2><p>Unique string IDs help keep development, translation and QA teams on the same page.Another reason for this is: if you have for example a text in English that is visible in 2 different places on your UI, but is potentially translated differently in other languages (because it fits better).</p><h2 id="What-about-fonts-Who-selects-their-types-and-sizes-in-the-software"><a href="#What-about-fonts-Who-selects-their-types-and-sizes-in-the-software" class="headerlink" title="What about fonts? Who selects their types and sizes in the software?"></a>What about fonts? Who selects their types and sizes in the software?</h2><p>Both localization and development teams should select fonts as a cooperative effort.And how do you decide on the proportion of fonts?While fonts for North American and European languages should be &quot;Proportional&quot;, &quot;Monospace&quot; is the right type for Asian languages.Are the fonts compatible with special characters for all languages?Different languages, different needs: for special characters, word order, even numbers.</p><h2 id="How-are-date-time-currency-and-numbers-displayed"><a href="#How-are-date-time-currency-and-numbers-displayed" class="headerlink" title="How are date, time, currency, and numbers displayed?"></a>How are date, time, currency, and numbers displayed?</h2><p>Allow date, time, currency, and numbers to be displayed with differing figures and number separators by language or even region.Make sure the date format is right because Americans do month/day/year Brit day/month/year and by the way in America the week starts on a Sunday and in Britain the week starts on Monday. Europe wants 24 hour clocks and America wants 12 hour clocks.Regarding numbers, here a little list:<img src="numbers.png" alt="" title="locize © inweso GmbH"><a href="https://en.wikipedia.org/wiki/Decimal_separator" target="_blank" rel="external">source</a></p><h2 id="What-encoding-do-you-use-for-your-text-assets"><a href="#What-encoding-do-you-use-for-your-text-assets" class="headerlink" title="What encoding do you use for your text assets?"></a>What encoding do you use for your text assets?</h2><p>Choose an encoding that supports all target languages.If you don&#39;t know, just choose UTF-8.If you want to know <a href="http://codel10n.com/why-utf8-is-best-encoding-for-your-customers/" target="_blank" rel="external">Why UTF-8 is the best encoding?</a> read this <a href="http://codel10n.com/why-utf8-is-best-encoding-for-your-customers/" target="_blank" rel="external">article</a>.By the way, to tell apart assets intended for a particular locale use ISO 693-1 &amp; 3166-1 language and country codes to mark assets by locale.</p><h2 id="Do-the-art-assets-of-your-software-UI-have-text"><a href="#Do-the-art-assets-of-your-software-UI-have-text" class="headerlink" title="Do the art assets of your software UI have text?"></a>Do the art assets of your software UI have text?</h2><p>Be ready to swap art assets if they contain legible text.Sometimes even if there is no legible text you may want to adapt the art asset (i.e. an image) because of cultural reasons.There are some libraries that can help with this issue i.e. <a href="https://github.com/i18next/i18nextify#fragment-replacement-for-links-and-images" target="_blank" rel="external">Fragment replacement for links and images</a></p><h2 id="Did-you-put-the-original-text-through-a-spelling-grammar-and-style-check"><a href="#Did-you-put-the-original-text-through-a-spelling-grammar-and-style-check" class="headerlink" title="Did you put the original text through a spelling, grammar, and style check?"></a>Did you put the original text through a spelling, grammar, and style check?</h2><p>Prevent back-and-forth rechecking that my stall the whole process.As an alternative you should be thinking of making some sort of <a href="https://blog.locize.com/2016-10-05-continuous-development-integration-and-localization-cd/">Continuous Localization</a>.With <a href="https://blog.locize.com/2016-10-05-continuous-development-integration-and-localization-cd/">Continuous Localization</a> you can take care of the translations from the first day and keep up with changes with ease.The process of translation and development are separated.</p><h2 id="Do-you-use-a-tracking-system"><a href="#Do-you-use-a-tracking-system" class="headerlink" title="Do you use a tracking system?"></a>Do you use a tracking system?</h2><p>Tracking every change on localizable content can be important to ensure that no content will be left behind when distributing your software.For certain projects or industries it&#39;s important to know which translator has done what change for auditing reasons.Some translation management systems offer a dedicated <a href="https://locize.com/services.html" target="_blank" rel="external">audit feature</a>. This <a href="https://medium.com/@jamuhl/empower-your-localization-team-33e10ca9e333" target="_blank" rel="external">empowers</a> you to prove anytime when a content fragment was changed.</p><h2 id="What-file-formats-are-you-sending-for-translation-work"><a href="#What-file-formats-are-you-sending-for-translation-work" class="headerlink" title="What file formats are you sending for translation work?"></a>What file formats are you sending for translation work?</h2><p>JSON, XML (or a derivative format i.e. XLIFF) is preferred over plain text or Excel files.Even better are localization management systems that offers a completely integrated approach.</p><h2 id="Where-are-the-localization-assets"><a href="#Where-are-the-localization-assets" class="headerlink" title="Where are the localization assets?"></a>Where are the localization assets?</h2><p>Store localization assets in an easy to access location, for swift access, import and export.With a proper <a href="https://blog.locize.com/2016-10-05-continuous-development-integration-and-localization-cd/">Continuous Localization</a> solution translations can be updated without the need to release an update of your app.For example: translations deployed to a CDN and consumed from your application.</p><h2 id="Do-you-intend-to-have-the-texts-translated-into-more-than-one-language"><a href="#Do-you-intend-to-have-the-texts-translated-into-more-than-one-language" class="headerlink" title="Do you intend to have the texts translated into more than one language?"></a>Do you intend to have the texts translated into more than one language?</h2><p>Process resource files into separate language ones so all translators can work in parallel.A good localization management solution can really help here. All team members can collaboratively work in parallel. In this way, you can get to your objective in a faster way.</p><h2 id="How-do-you-track-which-language-is-fully-translated"><a href="#How-do-you-track-which-language-is-fully-translated" class="headerlink" title="How do you track which language is fully translated?"></a>How do you track which language is fully translated?</h2><p>To say it in one sentence: &quot;Start thinking about the localization process early!&quot;The biggest mistake one can do is looking on localization as it’s only based on instrumenting your code and extract texts into resource files so you can translate them later.You should keep full overview about what is translated and what not — even more if you order translations from the translation providers you also should keep track of your open orders.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;img-100&quot;&gt;
&lt;img src=&quot;title.png&quot; alt=&quot;&quot; title=&quot;locize © inweso GmbH&quot;&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;So you want people from all around t</summary>
      
    
    
    
    <category term="Post" scheme="http://blog.locize.com/categories/Post/"/>
    
    
    <category term="locize" scheme="http://blog.locize.com/tags/locize/"/>
    
    <category term="localization" scheme="http://blog.locize.com/tags/localization/"/>
    
    <category term="internationalization" scheme="http://blog.locize.com/tags/internationalization/"/>
    
    <category term="continuous development" scheme="http://blog.locize.com/tags/continuous-development/"/>
    
    <category term="continuous integration" scheme="http://blog.locize.com/tags/continuous-integration/"/>
    
    <category term="continuous localization" scheme="http://blog.locize.com/tags/continuous-localization/"/>
    
    <category term="continuous delivery" scheme="http://blog.locize.com/tags/continuous-delivery/"/>
    
    <category term="continuous translation" scheme="http://blog.locize.com/tags/continuous-translation/"/>
    
    <category term="i18next" scheme="http://blog.locize.com/tags/i18next/"/>
    
    <category term="formatjs" scheme="http://blog.locize.com/tags/formatjs/"/>
    
  </entry>
  
  <entry>
    <title>8 signs you should improve your localization process</title>
    <link href="http://blog.locize.com/2017-08-15-8-signs-you-should-improve-your-localization-process/"/>
    <id>http://blog.locize.com/2017-08-15-8-signs-you-should-improve-your-localization-process/</id>
    <published>2017-08-14T22:00:00.000Z</published>
    <updated>2017-08-15T09:59:58.000Z</updated>
    
    <content type="html"><![CDATA[<div class="img-100"><img src="title.png" alt="" title="locize © inweso GmbH"></div><p>Very often, when you&#39;re engrossed in the everyday work, you do not realize how easily your localization process could be improved.For this reason, it is important to me to show you the following 8 warning signs you should look out for:</p><h2 id="1-Waste-of-time"><a href="#1-Waste-of-time" class="headerlink" title="1. Waste of time"></a>1. Waste of time</h2><p><strong><em>Are you mailing translation files around the world? Always struggling with this translation files?</em></strong></p><p><img src="waste.gif" alt="" title="locize © inweso GmbH"></p><p>Other people ask for the resource files to be translated and you hand them out and deep in your mind you know there will be some last minute changes the day before release and even more changes after release.Some time later (days or weeks) some translated files lands in your inbox and you copy them to your repository... But there are already a lot of changes... Some terms are not used anymore others are new and not yet translated and others are modified by the developers in the meanwhile.</p><h2 id="2-Waterfall-process"><a href="#2-Waterfall-process" class="headerlink" title="2. Waterfall process"></a>2. Waterfall process</h2><p><strong><em>Are you trying to switch the development process to a more agile approach but the localization process does not fit? Is there no time to translate during the development iteration or sprint?</em></strong></p><p><img src="process.gif" alt="" title="locize © inweso GmbH"></p><p>By implementing more SaaS (Software as a Service) products today&#39;s organizations start to introduce CI/CD pipelines (Continuous Integration / Continuous Deployment).Developers focuses on instrumenting the code with the help of some i18n libraries and extract texts into resource files so someone can translate them later.Normally during a development iteration or sprint there is no time to translate the resources.That’s why some organizations opt to add an extra step to the process after which no text resource may be added, edited, or deleted.This <strong>“freeze”</strong> period gives technical writers and translators the necessary time to work. The more text needs to be handled the longer this period while take.This process slows down the release of the software in all languages quite a bit and will result in not really doing a continuous deployment process anymore.</p><h2 id="3-Missing-context"><a href="#3-Missing-context" class="headerlink" title="3. Missing context"></a>3. Missing context</h2><p><strong><em>Are the translated texts too long? Do you feel the translator does not have understood what the product is?</em></strong></p><p><img src="context.png" alt="" title="locize © inweso GmbH"></p><p>By handing over the resource files to the translators, it is very difficult for them to imagine the translated texts in the real product. That&#39;s why very often the translated texts feels wrong when imported back to the product.Doing proper translations needs more information by providing the context or even better by being done incontext.</p><h2 id="4-Hard-translation-management"><a href="#4-Hard-translation-management" class="headerlink" title="4. Hard translation management"></a>4. Hard translation management</h2><p><strong><em>Are translation texts suddenly deleted while translating? Is the format of the text corrupt after translating?</em></strong></p><p><img src="translation.gif" alt="" title="locize © inweso GmbH"></p><p>Translators and technical editors are humans too. Not only the lack of technical know how (html or markdown formatting, etc...) but also the power of their tooling is important and crucial.The worse the tooling the greater the danger of getting corrupt texts.</p><h2 id="5-Poor-integration"><a href="#5-Poor-integration" class="headerlink" title="5. Poor integration"></a>5. Poor integration</h2><p><strong><em>Do you wish using the same localization process for your product and other systems simultaneously, like your marketing website?</em></strong></p><p><img src="integration.png" alt="" title="locize © inweso GmbH"></p><p>Mostly the product development and the marketing department are split in multiple teams. In that way the localization process evolves in different ways. Not having a central team being responsible for offering internationalization libraries, apis and localization guidelines makes it difficult to find synergies across different products and teams.</p><h2 id="6-Locked-in"><a href="#6-Locked-in" class="headerlink" title="6. Locked in"></a>6. Locked in</h2><p><strong><em>Do you have troubles in finding open internationalization libraries compatible with your existing resource files or vice-versa find a localization solution compatible with your internationalization library?</em></strong></p><p><img src="locked.png" alt="" title="locize © inweso GmbH"></p><p>Very often the localization process enforces to develop very customized tools and helper scripts if not standardized or at least based on open specifications, formats and protocols.</p><h2 id="7-Unclear-project-progress"><a href="#7-Unclear-project-progress" class="headerlink" title="7. Unclear project progress"></a>7. Unclear project progress</h2><p><strong><em>Are your resource files all fully translated? What is missing? What is the expected effort to complete?</em></strong></p><p><img src="progress.png" alt="" title="locize © inweso GmbH"></p><p>Not having a centralized collaborative translation management system that is actively used by developers and translation editors makes it very difficult to forecast when a translation is fully translated and to plan its release.</p><h2 id="8-Expensive"><a href="#8-Expensive" class="headerlink" title="8. Expensive"></a>8. Expensive</h2><p><strong><em>Are your translation orders to expensive? Do you have multiple dedicated personal resources?</em></strong></p><p><img src="costs.png" alt="" title="locize © inweso GmbH"></p><p>There is not only the employee salary, but also the wasted time &quot;waiting&quot;, proofreading and correcting the translated resources.And finally, each delay of your time-to-market costs a lot of money.</p><h2 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h2><p><img src="infographic.png" alt="" title="locize © inweso GmbH"></p><p>As we learned, localizing software releases is a nightmare and no translation tool really supports product managers, developers and translators well in software translations with continuous changes and additions. Someone started to work on <a href="http://locize.com" target="_blank" rel="external">locize.com</a> to bridge the gap between translation and development.</p><p>Watch the <a href="http://locize.com/#video" target="_blank" rel="external">introduction video</a> to learn more.<div class="video-container"><iframe src="//www.youtube.com/embed/YQryHo1iHb8" frameborder="0" allowfullscreen></iframe></div></p><p><a href="http://locize.com" target="_blank" rel="external">locize</a> removes the pain in the translation process. No more delays in shipping your software because of missing translations. Translator could keep up with changes from day one. The continuous localization process keeps up with your demanding business.</p><p>Stop waiting - start localizing.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;img-100&quot;&gt;
&lt;img src=&quot;title.png&quot; alt=&quot;&quot; title=&quot;locize © inweso GmbH&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Very often, when you&amp;#39;re engrossed in the ever</summary>
      
    
    
    
    <category term="Post" scheme="http://blog.locize.com/categories/Post/"/>
    
    
    <category term="locize" scheme="http://blog.locize.com/tags/locize/"/>
    
    <category term="localization" scheme="http://blog.locize.com/tags/localization/"/>
    
    <category term="internationalization" scheme="http://blog.locize.com/tags/internationalization/"/>
    
  </entry>
  
  <entry>
    <title>How locize leverages serverless</title>
    <link href="http://blog.locize.com/2017-06-22-how-locize-leverages-serverless/"/>
    <id>http://blog.locize.com/2017-06-22-how-locize-leverages-serverless/</id>
    <published>2017-06-21T22:00:00.000Z</published>
    <updated>2020-01-06T13:59:54.064Z</updated>
    
    <content type="html"><![CDATA[<div class="img-100"><img src="title.png" alt="" title="locize © inweso GmbH"></div><p><em><a href="https://www.slideshare.net/adrai/locize-tech-talk" target="_blank" rel="external">slides</a></em></p><h2 id="Why-we-choose-serverless"><a href="#Why-we-choose-serverless" class="headerlink" title="Why we choose serverless?"></a>Why we choose serverless?</h2><p><img src="why.png" alt="" title="locize © inweso GmbH"></p><p>When we started with <a href="http://www.locize.com" target="_blank" rel="external">locize</a> we did not know how fast it would scale… serverless means we didn’t need to make that choice. The serverless architecture scales with our business model.</p><p>The next argument is, we hate maintaining and operating infrastructure. We believe in NoOps. Here serverless saves not only computing power but human resources too.</p><p>Finally you may ask: Why not a PaaS solution? =&gt; We are working with PaaS solutions since early 2011 and we always had the dream to have a platform where you really pay only when something is used (i.e. call of a function, query of a table, etc…) so you can fully concentrate to the business code.And last but not least: serverless is really cool!</p><h2 id="Why-we-choose-AWS"><a href="#Why-we-choose-AWS" class="headerlink" title="Why we choose AWS?"></a>Why we choose AWS?</h2><p><img src="why_aws.png" alt="" title="locize © inweso GmbH"></p><p>We think AWS is the only production-ready FaaS provider (and more) that works out of the box and scales like you expected. It’s designed with an API-first approach, so everything can be automated.We think AWS has in mind a possible future where you can also run functions directly on the edge (directly on hardware).Additionally AWS has not only lambda but completes the serverless offering with:</p><ul><li>API Gateway</li><li>DynamoDB</li><li>Simple Storage Service (S3)</li><li>CloudFront</li><li>Simple Email Service (SES)</li><li>and a lot more...</li></ul><h2 id="The-basic-setup"><a href="#The-basic-setup" class="headerlink" title="The basic setup"></a>The basic setup</h2><p><img src="setup.png" alt="" title="locize © inweso GmbH"></p><p>When Developers/Translation Editors/Managers, etc… goes to www.locize.app, the locize-app-client (which is hosted on S3 and exposed by CloudFront) is served. The client then accesses our lambda backend through the API-Gateway also exposed by CloudFront. Our main working storage (DynamoDB) is then accessed by our lambda functions.Each time someone publishes (or auto-publishes) a translation resource a lambda function will save that resource to S3. When published, the endusers of your product can access them via CDN edge locations offered and exposed by CloudFront too.</p><h2 id="Full-Stack-JavaScript"><a href="#Full-Stack-JavaScript" class="headerlink" title="Full-Stack JavaScript"></a>Full-Stack JavaScript</h2><p><img src="full_js.png" alt="" title="locize © inweso GmbH"></p><p>locize is a single language solution! Everything is JavaScript!The complete application backend, the api, the cli and other tools runs on <a href="https://nodejs.org" target="_blank" rel="external">node.js</a>… and the locize-app-client is a modern SPA based on <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> and <a href="http://redux.js.org/" target="_blank" rel="external">Redux</a>.</p><h2 id="Lambda-functions"><a href="#Lambda-functions" class="headerlink" title="Lambda functions"></a>Lambda functions</h2><p><img src="types.png" alt="" title="locize © inweso GmbH"></p><p>locize uses 3 different base lambda types.These are not real „AWS-defined“ lambda types but we&#39;ve defined these types ourself.</p><h3 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h3><p><img src="express.png" alt="" title="locize © inweso GmbH"></p><p>The first type is the express type.It defines RESTful APIs using the normal <a href="http://expressjs.com/" target="_blank" rel="external">express</a> framework.You see the app.js file looks like a normal <a href="http://expressjs.com/" target="_blank" rel="external">express</a>  based project.But at the end of the file you see that if this file is executed directly (like <code>node app.js</code>) it will start to listen on port 3000 and can be used to test locally.But if required by another file it exports the configured <a href="http://expressjs.com/" target="_blank" rel="external">express</a> app.For this scenario there is an additional file (lambda.js) that uses the help of the npm module „aws-serverless-express“ to proxy and map the lambda function calls to http requests and responses. </p><h3 id="Async"><a href="#Async" class="headerlink" title="Async"></a>Async</h3><p><img src="async.png" alt="" title="locize © inweso GmbH"></p><p>The second type is the async type.This lambda function is triggered by other lambda functions to compute non blocking tasks. i.e. calculation of current words in project, or publishing translation resources to S3, etc…The key element here is that a lambda function is able to call another lambda function by simply using the official aws-sdk npm module.With the help of AWS policies you can define exactly which function can be invoked.</p><h3 id="S3-event"><a href="#S3-event" class="headerlink" title="S3 event"></a>S3 event</h3><p><img src="s3.png" alt="" title="locize © inweso GmbH"></p><p>The last type is the S3 event type.This lambda function is i.e. triggered by a new CloudFront log file that was saved to s3 (this feature can be enabled on CloudFront).We use this to i.e. calculate the amount of downloads or to generate statistics.</p><h2 id="Our-tooling"><a href="#Our-tooling" class="headerlink" title="Our tooling"></a>Our tooling</h2><p><img src="claudia.png" alt="" title="locize © inweso GmbH"></p><p>Because we have a pure JavaScript landscape we’ve chosen <a href="https://claudiajs.com/" target="_blank" rel="external">claudia.js</a>It automatically installs and configures a lot on AWS. From API-Gateway to Lambda versioning.<a href="https://claudiajs.com/" target="_blank" rel="external">Claudia.js</a> does not abstract away AWS services. It’s really transparent and easy to understand.That’s why our advice is: if you want to build simple services and run them with AWS lambda, and you&#39;re looking for something low-overhead, easy to get started with, and you only want to use the <a href="https://nodejs.org" target="_blank" rel="external">node.js</a> runtime, Claudia is a good choice.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;img-100&quot;&gt;
&lt;img src=&quot;title.png&quot; alt=&quot;&quot; title=&quot;locize © inweso GmbH&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.slideshare.net/adrai/loc</summary>
      
    
    
    
    <category term="Post" scheme="http://blog.locize.com/categories/Post/"/>
    
    
    <category term="backend" scheme="http://blog.locize.com/tags/backend/"/>
    
    <category term="aws" scheme="http://blog.locize.com/tags/aws/"/>
    
    <category term="service" scheme="http://blog.locize.com/tags/service/"/>
    
    <category term="serverless" scheme="http://blog.locize.com/tags/serverless/"/>
    
  </entry>
  
  <entry>
    <title>locizify v2 - improvements</title>
    <link href="http://blog.locize.com/2017-02-21-locizify-v2/"/>
    <id>http://blog.locize.com/2017-02-21-locizify-v2/</id>
    <published>2017-02-20T23:00:00.000Z</published>
    <updated>2017-06-23T11:05:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="We-use-the-unpkg-CDN"><a href="#We-use-the-unpkg-CDN" class="headerlink" title="We use the unpkg CDN"></a>We use the unpkg CDN</h2><p>In the past we deployed the locizify script to our own CDN space. While this was ok migrating over to <a href="https://unpkg.com" target="_blank" rel="external">https://unpkg.com</a> allows us to provide you an improved usage. In the past your code was bound to the latest deployed script on our CDN. As we strongly respect <a href="http://semver.org/" target="_blank" rel="external">semver</a> we just were able to update the script with non breaking updates.</p><p>Now as you could use the source from unpkg you&#39;re able to fix the version in your code like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">https://unpkg.com/locizify // latest</div><div class="line">https://unpkg.com/locizify@2.0.1 // specific version</div><div class="line">https://unpkg.com/locizify@^2.0.0 // latest non breaking version 2.x.x</div></pre></td></tr></table></figure><p>full sample:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"locizify"</span> <span class="attr">projectid</span>=<span class="string">"[PROJECT_ID]"</span></span></div><div class="line"><span class="tag">    <span class="attr">apikey</span>=<span class="string">"[API_KEY]"</span> <span class="attr">referencelng</span>=<span class="string">"[LNG]"</span></span></div><div class="line"><span class="tag">    <span class="attr">fallbacklng</span>=<span class="string">"[LNG]"</span> <span class="attr">saveMissing</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">"https://unpkg.com/locizify@^2.0.0"</span> /&gt;</span><span class="undefined"></span></div></pre></td></tr></table></figure><h2 id="New-Features"><a href="#New-Features" class="headerlink" title="New Features"></a>New Features</h2><h3 id="merging"><a href="#merging" class="headerlink" title="merging"></a>merging</h3><p>Sometimes you want to keep innerHTML of an element together to make it easier to translate.</p><p>Before:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Might be easier to translate this <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>the new way<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// resulting keys</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"Might be easier to translate this "</span>: <span class="string">"Might be easier to translate this "</span>,</div><div class="line">  <span class="string">"the new way"</span>: <span class="string">"the new way"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Using merge:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">merge</span>&gt;</span>Might be easier to translate this <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>the new way<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// resulting keys</span></div><div class="line">&#123;</div><div class="line">  "Might be easier to translate this &lt;a href="#"&gt;the new way&lt;/a&gt;": "Might be easier to translate this &lt;a href="#"&gt;the new way&lt;/a&gt;"</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>While you can set the <code>merge</code> attribute on every element you like to have this behaviour. You can also specify this globally on init:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/locizify@^2.0.0"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">      locizify.init(&#123;</span></div><div class="line"><span class="javascript">        <span class="comment">// merging content (eg. a tags in p tags)</span></span></div><div class="line"><span class="javascript">        mergeTags: [], <span class="comment">// tags to merge innerHtml to one key</span></span></div><div class="line"><span class="javascript">        inlineTags: [], <span class="comment">// tags to inline (eg. a, span, abbr, ...)</span></span></div><div class="line"><span class="javascript">        ignoreInlineOn: [], <span class="comment">// tags to ignore inlining tags under inlineTags</span></span></div><div class="line"><span class="undefined">      &#125;);</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  ...</div></pre></td></tr></table></figure><h3 id="cleanup-for-keys"><a href="#cleanup-for-keys" class="headerlink" title="cleanup for keys"></a>cleanup for keys</h3><p>With v2 we improved the key generation from content by removing unused whitespaces:</p><p>Before:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">  Having text</div><div class="line">  over multiple lines</div><div class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span> with space in front<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// resulting keys</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"  Having text/n  over multiple lines"</span>: <span class="string">"  Having text/n  over multiple lines"</span>,</div><div class="line">  <span class="string">" with space in front"</span>: <span class="string">" with space in front"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Using cleanup (default enabled in v2):</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">  Having text</div><div class="line">  over multiple lines</div><div class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span> with space in front<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// resulting keys</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"Having text over multiple lines"</span>: <span class="string">"Having text over multiple lines"</span>,</div><div class="line">  <span class="string">"with space in front"</span>: <span class="string">"with space in front"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>All the unnecessary whitespaces get removed making translation more easy. You can manually toggle this off or ignore it for certain tags:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/locizify@^2.0.0"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">      locizify.init(&#123;</span></div><div class="line"><span class="javascript">        <span class="comment">// cleanup for keys</span></span></div><div class="line"><span class="javascript">        cleanIndent: <span class="literal">true</span>, <span class="comment">// removes indent, eg. if a p tag spans multiple lines</span></span></div><div class="line"><span class="javascript">        ignoreCleanIndentFor: [<span class="string">'PRE'</span>, <span class="string">'CODE'</span>], <span class="comment">// ignores cleaning up of indent for those tags needing that extra spaceing</span></span></div><div class="line"><span class="javascript">        cleanWhitespace: <span class="literal">true</span>, <span class="comment">// removes surrounding whitespace from key</span></span></div><div class="line"><span class="undefined">      &#125;);</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  ...</div></pre></td></tr></table></figure><h3 id="Fragment-replacement-for-links-and-images"><a href="#Fragment-replacement-for-links-and-images" class="headerlink" title="Fragment replacement for links and images"></a>Fragment replacement for links and images</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/images/&#123;&#123;a.png&#125;&#125;"</span> <span class="attr">alt</span>=<span class="string">"big A"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/&#123;&#123;statistic&#125;&#125;"</span>&gt;</span>Open my statistics<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure><p>You will find <code>a.png</code> and <code>statistic</code> to be a key in your translations - it&#39;s value can be replaced to eg. a-de.png for german (all other languages will fallback to a.png)</p><h3 id="Translate-other-then-default-attributes-on-elements"><a href="#Translate-other-then-default-attributes-on-elements" class="headerlink" title="Translate other then default attributes on elements"></a>Translate other then default attributes on elements</h3><p>eg: for validation error messages<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">data-parsley-error-message</span>=<span class="string">"This field is required"</span> /&gt;</span></div></pre></td></tr></table></figure></p><p>Just add <code>data-parsley-error-message</code> to the <code>translateAttributes</code> Array on init:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/locizify@^2.0.0"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">      locizify.init(&#123;</span></div><div class="line"><span class="javascript">        translateAttributes: [<span class="string">'placeholder'</span>, <span class="string">'title'</span>, <span class="string">'alt'</span>, <span class="string">'value#input.type=button'</span>, <span class="string">'value#input.type=submit'</span>],</span></div><div class="line"><span class="undefined">      &#125;);</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  ...</div></pre></td></tr></table></figure><p>You can define rules like:</p><p><code>`[attributeToTranslate]#element.andOrAttributeWithValue</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">value#input // all values on input</div><div class="line">value#type // all values on elements having an attribute type</div><div class="line">value#input.type=button // all values on input element having an attribute type set to button</div></pre></td></tr></table></figure><h2 id="Migration-from-v1"><a href="#Migration-from-v1" class="headerlink" title="Migration from v1"></a>Migration from v1</h2><p>To make v2 having the same behaviour as v1 you could change the init options like:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/locizify@^2.0.0"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">      locizify.init(&#123;</span></div><div class="line"><span class="javascript">        <span class="comment">// cleanup for keys</span></span></div><div class="line"><span class="javascript">        cleanIndent: <span class="literal">false</span>,</span></div><div class="line"><span class="javascript">        cleanWhitespace: <span class="literal">false</span>,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        ...</span></div><div class="line"><span class="undefined">      &#125;);</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  ...</div></pre></td></tr></table></figure><p>This way you assert keys get not cleaned of whitespaces so they match the counterpart of v1.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;We-use-the-unpkg-CDN&quot;&gt;&lt;a href=&quot;#We-use-the-unpkg-CDN&quot; class=&quot;headerlink&quot; title=&quot;We use the unpkg CDN&quot;&gt;&lt;/a&gt;We use the unpkg CDN&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="Post" scheme="http://blog.locize.com/categories/Post/"/>
    
    
    <category term="locizify" scheme="http://blog.locize.com/tags/locizify/"/>
    
  </entry>
  
  <entry>
    <title>Localization should be fun</title>
    <link href="http://blog.locize.com/2016-11-16-localization-fun/"/>
    <id>http://blog.locize.com/2016-11-16-localization-fun/</id>
    <published>2016-11-15T23:00:00.000Z</published>
    <updated>2017-01-11T13:49:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Learn from our experience we made during using the locize service on our own new webapplication.</p><div class="img-100"><img src="thumb.png" alt="" title="working hard"></div><p>In an early stage of drafting out our plan to completely rewrite our locize webclient we decided to use our own service to manage the content on it. There was no plan on providing it in another language then english - but we strongly believed even not having the demand of translating we could profit of separating the content from the application logic. This way we could go full speed during development while working on final terminology later. As a plus we could change all the texts in production without having to deploy a new client.</p><p>Another reason was - we wanted to get a better feeling on how the experience is - creating a new project using our service. Our goal was to get a workflow that is faster, less error prone and more fun for everyone being part of the localization process.</p><h3 id="Our-past-workflow"><a href="#Our-past-workflow" class="headerlink" title="Our past workflow"></a>Our past workflow</h3><p>To have a comparison with the updated workflow we like to describe how things got done before using locize. <strong>If you like to direcly see how things worked with locize just skip this section</strong>.</p><h5 id="Developers-path"><a href="#Developers-path" class="headerlink" title="Developers path"></a>Developers path</h5><ul><li>Create a new component, page and get functionality to work</li><li>Replace all texts with instrumented code (calls to translation function)</li><li>Add all the new keys to the correct json file (manually resolving the nesting)</li><li>Restart server to load and serve the new translations files</li><li>See the json has an error -&gt; fix it -&gt; Restart again</li><li>See that some keys are still missing -&gt; add -&gt; Restart again</li></ul><h5 id="Technical-editor-Translator-path"><a href="#Technical-editor-Translator-path" class="headerlink" title="Technical editor / Translator path"></a>Technical editor / Translator path</h5><ul><li>Ask developer for latest resource files</li><li>Getting them a few days later -&gt; start changing texts to match terminology</li><li>Save the file and pass it back to development</li><li>Ask for new texts - getting only a file having all texts -&gt; going crazy as having no idea which stuff is new...start to compare with last file</li><li>Pass new texts to development</li><li>...</li></ul><h5 id="Poor-guys-path"><a href="#Poor-guys-path" class="headerlink" title="Poor guys path"></a>Poor guys path</h5><ul><li>tries to merge files coming from development and technical editor</li><li>Goes crazy and starts searching for a new job ;)</li></ul><p>Doing agile / continuous localization could be hard...you can improve this by doing the steps in waterfall manner: development -&gt; technical editor -&gt; translations. But not only takes this a lot longer but also the problems come back as soon as development starts work on next version having semi-finished texts from the technical editor.</p><p>Things need to get better - so lets have a look on how our experience was using locize:</p><h2 id="Having-locize-in-the-flow-early"><a href="#Having-locize-in-the-flow-early" class="headerlink" title="Having locize in the flow early"></a>Having locize in the flow early</h2><p>Developing new components / pages we directly instrumented the code. In the early stage we still started with having the texts in code and instrument after being functional working. With getting more used to the new workflow we just removed that step and directly used to call the translation function.</p><div class="img-80"><img src="1_instrument_code.png" alt="" title="instrumented code"></div><p>Using webpacks hot-module-reload feature we just needed to save the file and the webapplication did it&#39;s reload magic:</p><div class="img-80"><img src="2_trigger_savemissing.png" alt="" title="save missing was triggered"></div><p>This triggered the save missing feature which was enabled during development. So all the untranslated texts were passed automatically to our locize project.</p><p>Time to reload the new data on our locize project using the new filter &quot;was created by missing&quot; to only show newly submitted texts:</p><div class="img-80"><img src="3_managecontent.png" alt="" title="edit content"></div><p>Just fill the newly added keys with the content it should have - press save - and done. Reload the application and all the new texts are there:</p><div class="img-80"><img src="4_done.png" alt="" title="content loaded from locize"></div><p>From here the technical editor / translators could change texts as needed and verify those in the test environment completely independent of the development.</p><ul><li>Never ask for resource files again</li><li>Never wait for the new texts / translations to be merged and deployed</li><li>No need to beg your developers to change a text - not even in production</li></ul><p>What happened to the <strong>poor guy</strong>? He was not needed any longer and lost his job before having the chance to search for a new one - just kidding ;)</p><hr><p>Separating development and content editing made both sides work more efficient, with less errors and a lot faster. Developers, technical editor and translators could work hand in hand without disturbing each others work.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Learn from our experience we made during using the locize service on our own new webapplication.&lt;/p&gt;
&lt;div class=&quot;img-100&quot;&gt;
&lt;img src=&quot;thum</summary>
      
    
    
    
    <category term="Post" scheme="http://blog.locize.com/categories/Post/"/>
    
    
    <category term="locize" scheme="http://blog.locize.com/tags/locize/"/>
    
  </entry>
  
  <entry>
    <title>Continuous Development, Integration and Localization =&gt; Continuous Deployment</title>
    <link href="http://blog.locize.com/2016-10-05-continuous-development-integration-and-localization-cd/"/>
    <id>http://blog.locize.com/2016-10-05-continuous-development-integration-and-localization-cd/</id>
    <published>2016-10-04T22:00:00.000Z</published>
    <updated>2020-01-06T13:59:54.064Z</updated>
    
    <content type="html"><![CDATA[<div class="img-100"><img src="hands_world.jpg" alt="" title="localization"></div><h3 id="Past-times"><a href="#Past-times" class="headerlink" title="Past times"></a>Past times</h3><p>In the past most organizations that have to write some software planned, developed and released their product in one-year or even multiple-year cycles. =&gt;Typical waterfall process.Every time the developer team had finished implementing the features, the product manager could start to organize and initiate the translation process.So the only thing the developers had to guarantee, was to be able to export and import text resources.That way the texts could be translated all together, by sending them to different agencies or regional market organizations, etc…When translations were done (after days, weeks or even months), they’d be sent back to the product manager who forwarded them to the developers.They then had taken the translations, imported and merged them into the product, and (re-)released.</p><h3 id="Status-Quo"><a href="#Status-Quo" class="headerlink" title="Status Quo"></a>Status Quo</h3><p>Most of today’s organizations are trying to switch the development process to a more agile approach.By implementing more SaaS (Software as a Service) products today’s organizations start to introduce CI/CD pipelines (Continuous Integration / Continuous Deployment).Developers focuses on instrumenting the code with the help of some i18n libraries like:</p><p><a href="http://i18next.com/" target="_blank" rel="external"><img src="i18next.png" alt="http://i18next.com/"></a></p><p><a href="http://formatjs.io/" target="_blank" rel="external"><img src="formatjs.png" alt="http://formatjs.io/"></a></p><p><a href="http://airbnb.io/polyglot.js/" target="_blank" rel="external">http://airbnb.io/polyglot.js/</a></p><p>and extract texts into resource files so someone can translate them later.Normally during a development iteration or sprint there is no time to translate the resources, and not just because most people have this sort of attitude:</p><blockquote><p>&lt;&lt; We are not interested in the translation process itself. &gt;&gt;</p></blockquote><p>That’s why some organizations opt to add an extra step to the process after which no text resource may be added, edited, or deleted.This <strong>“freeze”</strong> period gives technical writers and translators the necessary time to work on. The more text needs to be handled the longer is this period.This process slows down the release of the software in all languages quite a bit and will result in not really doing a continuous deployment.</p><h3 id="True-Continuous-Deployment-with-Continuous-Localization"><a href="#True-Continuous-Deployment-with-Continuous-Localization" class="headerlink" title="True Continuous Deployment with Continuous Localization"></a>True Continuous Deployment with Continuous Localization</h3><p>Because software development never stops when the first version of a product is released (bug fixes, minor updates and at some point major new versions and releases) — continuously.Your localization and translation process should follow the same pattern as your software development.You should be able to deploy your translation files separated from your software so you can update and manage them independently. And if you do so, you have to make sure you can have more then one version of your translations; at least one for the current released version and one for the current development branch.That way your technical writers and translators can take care of the translations from the first day and keep up with changes with ease.By doing this it is even possible to change or add translations without shipping a new release of your software!</p><blockquote><p>Cool, but isn’t this a little over the top… an extra tooling and deployment — doesn’t all this just add more complexity and effort?</p></blockquote><h4 id="You-don’t-have-to-build-this-yourself-—-There-is-locize"><a href="#You-don’t-have-to-build-this-yourself-—-There-is-locize" class="headerlink" title="You don’t have to build this yourself!!! — There is locize"></a>You don’t have to build this yourself!!! — There is locize</h4><div class="contact" style="margin-top: 0px;"><hr><p class="callout extra-margin">...give it a try: <strong><a href="https://www.locize.app/register" target="_blank" rel="external">Register!</a></strong></p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;img-100&quot;&gt;
&lt;img src=&quot;hands_world.jpg&quot; alt=&quot;&quot; title=&quot;localization&quot;&gt;
&lt;/div&gt;

&lt;h3 id=&quot;Past-times&quot;&gt;&lt;a href=&quot;#Past-times&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="Post" scheme="http://blog.locize.com/categories/Post/"/>
    
    
    <category term="locize" scheme="http://blog.locize.com/tags/locize/"/>
    
    <category term="localization" scheme="http://blog.locize.com/tags/localization/"/>
    
    <category term="internationalization" scheme="http://blog.locize.com/tags/internationalization/"/>
    
    <category term="continuous development" scheme="http://blog.locize.com/tags/continuous-development/"/>
    
    <category term="continuous integration" scheme="http://blog.locize.com/tags/continuous-integration/"/>
    
    <category term="continuous localization" scheme="http://blog.locize.com/tags/continuous-localization/"/>
    
    <category term="continuous delivery" scheme="http://blog.locize.com/tags/continuous-delivery/"/>
    
    <category term="continuous translation" scheme="http://blog.locize.com/tags/continuous-translation/"/>
    
    <category term="i18next" scheme="http://blog.locize.com/tags/i18next/"/>
    
    <category term="formatjs" scheme="http://blog.locize.com/tags/formatjs/"/>
    
    <category term="polyglot" scheme="http://blog.locize.com/tags/polyglot/"/>
    
  </entry>
  
  <entry>
    <title>The freedom of choice…i18next, polyglot or formatJS</title>
    <link href="http://blog.locize.com/2016-08-18-the-freedom-of-choice/"/>
    <id>http://blog.locize.com/2016-08-18-the-freedom-of-choice/</id>
    <published>2016-08-17T22:00:00.000Z</published>
    <updated>2020-01-06T13:59:54.063Z</updated>
    
    <content type="html"><![CDATA[<div class="img-100"><img src="idea.jpg" alt="" title="locize flexibility"></div><p>When we started work on locize.com our localization as a service platform we basically had in mind to solve the translation process for developers using our i18n framework <a href="http://i18next.com" target="_blank" rel="external">i18next.com</a>.</p><blockquote><p>Translation Management Systems are a great help. But still there is a gap between development and translation process. Files need to be exported / imported / merged and all while new content get added to be translated. The chaos is inevitable. locize.com comes to the rescue. It’s like a translation service on steroid directly connected to your i18next instrumented webproject. (<a href="http://i18next.com/docs/process/" target="_blank" rel="external">i18next</a>)</p></blockquote><p>A few weeks after the successful beta launch and adding a lot of third party services to order translations directly out of your locize project, we started wondering if we could also bring the awesomeness to other frontend internationalization frameworks like airbnb’s <a href="http://airbnb.io/polyglot.js/" target="_blank" rel="external">polyglot</a> or yahoo’s <a href="http://formatjs.io/" target="_blank" rel="external">formatJS</a>?</p><h3 id="polyglot-locize-com"><a href="#polyglot-locize-com" class="headerlink" title="polyglot + locize.com"></a>polyglot + locize.com</h3><p>Our first look at polyglot revealed that the implementation is rather similar to the i18next json format only the plurals are stored in a single key and separated by <code>||||</code>.</p><p>We decided to do a short spike using a node.js express server loading the resources from locize.com using its API and return a demo page using polyglot to translate it.</p><p><strong>Using request to load the translations:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params">lng, callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> url = <span class="string">'https://api.locize.app/[YOUR_PROJECT_ID]/latest/&#123;&#123;lng&#125;&#125;/translation'</span>.replace(<span class="string">'&#123;&#123;lng&#125;&#125;'</span>, lng);</div><div class="line">  request(url, <span class="function"><span class="keyword">function</span>(<span class="params">err, res, body</span>) </span>&#123;</div><div class="line">    callback(err, lng, body);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>The JSON we load from the locize project looks like:</strong></p><p><a href="https://api.locize.app/897381a6-125c-40b8-9b28-2f80ae9a3612/latest/en/translation" target="_blank" rel="external">https://api.locize.app/897381a6-125c-40b8-9b28-2f80ae9a3612/latest/en/translation</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"interpolate"</span>: <span class="string">"Hello, %&#123;name&#125;."</span>,</div><div class="line">  <span class="attr">"intro"</span>: <span class="string">"The locize.com platform is fully compatible with airbnb’s polyglot i18n module."</span>,</div><div class="line">  <span class="attr">"plural"</span>: <span class="string">"%&#123;smart_count&#125; car |||| %&#123;smart_count&#125; cars"</span>,</div><div class="line">  <span class="attr">"something"</span>: &#123;</div><div class="line">    <span class="attr">"nested"</span>: <span class="string">"Nested value something.nested"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"title"</span>: <span class="string">"Using polyglot with locize.com"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>We return a html file injecting the loaded json when requesting the root:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> lng = req.query.lng || <span class="string">'en'</span>;</div><div class="line"></div><div class="line">  fs.readFile(__dirname + <span class="string">'/index.html'</span>, (err, data) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</div><div class="line">    data = data.toString().replace(<span class="string">'###locals###'</span>, <span class="built_in">JSON</span>.stringify(locals[lng])).replace(<span class="string">'###lng###'</span>, lng);</div><div class="line"></div><div class="line">    res.set(<span class="string">'content-type'</span>, <span class="string">'text/html'</span>);</div><div class="line">    res.send(data);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><strong>In the html we basically use polyglot as described on it’s website:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="comment">// initialize polyglot by settings phrases on server</span></span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> polyglot = <span class="keyword">new</span> Polyglot(&#123; <span class="attr">phrases</span>: <span class="built_in">JSON</span>.parse(<span class="string">'###locals###'</span>), <span class="attr">locale</span>: <span class="string">'###lng###'</span> &#125;);</span></div><div class="line"><span class="javascript">  <span class="comment">// translate</span></span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">'headline'</span>).innerHTML = polyglot.t(<span class="string">'title'</span>);</span></div><div class="line"><span class="undefined">  ...</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>You can checkout this example on github: <a href="https://github.com/locize/locize-polyglot-example" target="_blank" rel="external">https://github.com/locize/locize-polyglot-example</a>.</p><p>While it is a very basic sample the main focus stays on proving just that you can profit from using locize.com using polyglot. Adapt the sample to your backend language or just use xhr directly to load the data inside your client. You directly benefit from the same benefits just i18next developers had until now using locize.com.</p><h3 id="formatJS-locize-com"><a href="#formatJS-locize-com" class="headerlink" title="formatJS + locize.com"></a>formatJS + locize.com</h3><p>formatJS is well known for using the intl API to parse dates and numbers plus uses the ICU message format for translations. The format is rather different from what was used in i18next, but still it’s just keybased json.</p><p>So we started from what we did with polyglot. For the backend there was no change needed, so just scroll up to the polyglot sample where we use request o load the translations.</p><p><strong>The JSON we load from the locize project looks like:</strong></p><p><a href="https://api.locize.app/9ac4fb1f-be22-4028-bcbc-0da13010b35e/latest/en/translation" target="_blank" rel="external">https://api.locize.app/9ac4fb1f-be22-4028-bcbc-0da13010b35e/latest/en/translation</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"interpolate"</span>: <span class="string">"Hello, &#123;name&#125;."</span>,</div><div class="line">  <span class="attr">"intro"</span>: <span class="string">"The locize.com platform is fully compatible with yahoo's format.js i18n module."</span>,</div><div class="line">  <span class="attr">"plural"</span>: <span class="string">"You have &#123;numPhotos, plural, =0 &#123;no photos.&#125;=1 &#123;one photo.&#125;other &#123;# photos.&#125;&#125;"</span>,</div><div class="line">  <span class="attr">"title"</span>: <span class="string">"Using format.js with locize.com"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>In the html we use the <a href="https://github.com/yahoo/intl-messageformat" target="_blank" rel="external">IntlMessageFormat</a> module and created a little helper function</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="comment">// initialize</span></span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> resources = <span class="built_in">JSON</span>.parse(<span class="string">'###locals###'</span>);</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> lng = <span class="string">'###lng###'</span>;</span></div><div class="line"><span class="javascript">  <span class="comment">// translation helper</span></span></div><div class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">key, opts</span>) </span>&#123;</span></div><div class="line"><span class="undefined">    opts = opts || &#123;&#125;;</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> m = <span class="keyword">new</span> IntlMessageFormat(resources[key], lng);</span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> m.format(opts);</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="javascript">  <span class="comment">// translate</span></span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">'headline'</span>).innerHTML = t(<span class="string">'title'</span>);</span></div><div class="line"><span class="undefined">  ...</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>You can see the full example on github: <a href="https://github.com/locize/locize-formatjs-example" target="_blank" rel="external">https://github.com/locize/locize-formatjs-example</a>.</p><p>The sample can easily be adapted to react-intl, ember-intl, handlebars-intl, dust-intl or any other framework using icu messageformat like eg. <a href="https://github.com/messageformat/messageformat.js" target="_blank" rel="external">https://github.com/messageformat/messageformat.js</a>.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>While initially focused on <a href="http://i18next.com/docs/jsons/" target="_blank" rel="external">i18next json format</a> when building locize.com we found out that you can profit from the locize.com service using <a href="http://airbnb.io/polyglot.js/" target="_blank" rel="external">polyglot</a> or any libary using messageformat (<a href="http://formatjs.io/" target="_blank" rel="external">formatJS</a> and others) too.</p><p>We love flexibility so we’re looking forward to our first customer creating a project using airbnb’s or yahoo’s i18n framework.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;img-100&quot;&gt;
&lt;img src=&quot;idea.jpg&quot; alt=&quot;&quot; title=&quot;locize flexibility&quot;&gt;
&lt;/div&gt;

&lt;p&gt;When we started work on locize.com our localization </summary>
      
    
    
    
    <category term="Post" scheme="http://blog.locize.com/categories/Post/"/>
    
    
    <category term="locize" scheme="http://blog.locize.com/tags/locize/"/>
    
    <category term="i18next" scheme="http://blog.locize.com/tags/i18next/"/>
    
    <category term="formatjs" scheme="http://blog.locize.com/tags/formatjs/"/>
    
    <category term="locizify" scheme="http://blog.locize.com/tags/locizify/"/>
    
    <category term="polyglot" scheme="http://blog.locize.com/tags/polyglot/"/>
    
  </entry>
  
  <entry>
    <title>how we eat our own dogfood</title>
    <link href="http://blog.locize.com/2016-06-11-eat-our-own-dogfood/"/>
    <id>http://blog.locize.com/2016-06-11-eat-our-own-dogfood/</id>
    <published>2016-06-10T22:00:00.000Z</published>
    <updated>2017-06-23T11:05:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>After relaunching our website with new templates for our documentation, post pages and adding a new landing page, we decided to have at least the landing page translated.</p><p>As we use <a href="https://hexo.io/" target="_blank" rel="external">hexo</a> to generate our static content it was just a natural fit to use our <a href="http://locize.com/integration.html" target="_blank" rel="external">locizify script</a> so we don&#39;t have to instrument the page ourself.</p><p>As we might add other areas later we decided to have a fixed namespace (filename) for the landing page. We used the advanced option to init locizify like described <a href="https://github.com/locize/locizify#via-init-function" target="_blank" rel="external">here</a>.</p><p>We ended with following snipplet:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"https://unpkg.com/locizify@^2.0.0"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  locizify.init(&#123;</div><div class="line">    namespace: <span class="string">'landingpage'</span>,</div><div class="line">    saveMissing: <span class="literal">true</span>,</div><div class="line">    fallbackLng: <span class="string">'en'</span>,</div><div class="line">    backend: &#123;</div><div class="line">      projectId: <span class="string">'3d0aa5aa-4660-4154-b6d9-907dbef10bb2'</span>,</div><div class="line">      apiKey: <span class="string">'******** private ********'</span>,</div><div class="line">      referenceLng: <span class="string">'en'</span>,</div><div class="line">      version: <span class="string">'production'</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// ignore some dynamic widgets</span></div><div class="line">    ignoreIds: [<span class="string">'nudgespotInappContainer'</span>, <span class="string">'nudgespotInappMessagesContainer'</span>, <span class="string">'nudgespotInappConversationsContainer'</span>, <span class="string">'__bs_notify__'</span>],</div><div class="line">    ignoreClasses: [<span class="string">'nudgespot-clean'</span>]</div><div class="line">  &#125;);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p>After reloading the page we had the source content in english inside our project. We translated that to german and italian in no time using our editor.</p><div class="img-80"><img src="translate.png" alt="" title="translate to german"></div><p>As the latest version gets auto published reloading the page with the additional querystring parameter <code>?lng=de</code> (or switching browser language) was enough to test the translation.</p><p>Next we created a production version (going to project settings -&gt; versions) so we can change or prepare new content during development without messing with the currently released page version.</p><div class="img-60"><img src="version.png" alt="" title="translate to german"></div><p>After that we wanted to avoid the flickering on initial load where the page first gets displayed in the source language until locizify loaded and initial translated the page.</p><p>To optimize this we just needed to add <code>display: none</code> to body <a href="https://github.com/locize/locizify#avoid-flickering-on-initial-load" target="_blank" rel="external">(more info)</a>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></div></pre></td></tr></table></figure><p>Finally we needed a solution to let the user change the language on our page. We started with a simple list of links:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/?lng=en"</span>&gt;</span>english<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/?lng=de"</span>&gt;</span>deutsch<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/?lng=it"</span>&gt;</span>italiano<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><p>But decided a select element would fit more to our current layout. We needed to add binding to i18next <a href="http://i18next.com/docs/api/#on-language-changed" target="_blank" rel="external">changeLanguage event</a> to select current language and handle the select <code>onChange</code> event.</p><p>Further we use <code>locizify.getLanguages</code> to get current available languages in our project, so we don&#39;t have to touch the code when we add new languages:</p><p><strong>the select element:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"languageSelect"</span> <span class="attr">onChange</span>=<span class="string">"handleSelectChange()"</span> <span class="attr">translated</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>the script:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// the select element</span></div><div class="line"><span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementById(<span class="string">'languageSelect'</span>);</div><div class="line"><span class="keyword">var</span> availableLngs = [];</div><div class="line"></div><div class="line"><span class="comment">// create select options based on project languages</span></div><div class="line">locizify.getLanguages(<span class="function"><span class="keyword">function</span>(<span class="params">err, lngs</span>) </span>&#123;</div><div class="line">  availableLngs = <span class="built_in">Object</span>.keys(lngs || &#123;&#125;);</div><div class="line">  availableLngs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">l</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> lng = lngs[l];</div><div class="line"></div><div class="line">    <span class="comment">// return if not at least 90% is translated</span></div><div class="line">    <span class="keyword">if</span> (lng.translated.production &lt; <span class="number">0.9</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="comment">// append ele</span></div><div class="line">    <span class="keyword">var</span> optEle = <span class="built_in">document</span>.createElement(<span class="string">"OPTION"</span>);</div><div class="line">    optEle.setAttribute(<span class="string">'value'</span>, l);</div><div class="line">    optEle.innerHTML = lng.nativeName;</div><div class="line">    ele.appendChild(optEle);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  updateSelect();</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// selects the value based on i18next lngs</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateSelect</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> selected;</div><div class="line">  locizify.i18next.languages.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">l</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!selected &amp;&amp; availableLngs.indexOf(l) &gt; <span class="number">-1</span>) selected = l;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  ele.value = selected || <span class="string">'en'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// reload page on selection</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleSelectChange</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> value = ele.options[ele.selectedIndex].value;</div><div class="line">  <span class="built_in">window</span>.location = updateQueryStringParameter(<span class="built_in">window</span>.location.href, <span class="string">'lng'</span>, value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bind i18next change language event</span></div><div class="line">locizify.i18next.on(<span class="string">'languageChanged'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">lng</span>) </span>&#123;</div><div class="line">  updateSelect();</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// just a helper to update uri with new params</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateQueryStringParameter</span>(<span class="params">uri, key, value</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"([?&amp;])"</span> + key + <span class="string">"=.*?(&amp;|$)"</span>, <span class="string">"i"</span>);</div><div class="line">  <span class="keyword">var</span> separator = uri.indexOf(<span class="string">'?'</span>) !== <span class="number">-1</span> ? <span class="string">"&amp;"</span> : <span class="string">"?"</span>;</div><div class="line">  <span class="keyword">if</span> (uri.match(re)) &#123;</div><div class="line">    <span class="keyword">return</span> uri.replace(re, <span class="string">'$1'</span> + key + <span class="string">"="</span> + value + <span class="string">'$2'</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> uri + separator + key + <span class="string">"="</span> + value;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>That&#39;s all. Our project was translated in no time including a custom language selector:</p><div class="img-80"><img src="result.png" alt="" title="translated to german"></div><p>We are very pleased with the outcome of eating our own dogfood. Next step will be to order professional translations for the languages we can&#39;t translate ourself...</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;After relaunching our website with new templates for our documentation, post pages and adding a new landing page, we decided to have at l</summary>
      
    
    
    
    <category term="Post" scheme="http://blog.locize.com/categories/Post/"/>
    
    
    <category term="locize" scheme="http://blog.locize.com/tags/locize/"/>
    
    <category term="locizify" scheme="http://blog.locize.com/tags/locizify/"/>
    
  </entry>
  
  <entry>
    <title>technology stack - locize is serverless</title>
    <link href="http://blog.locize.com/2016-04-07-technology-stack/"/>
    <id>http://blog.locize.com/2016-04-07-technology-stack/</id>
    <published>2016-04-06T22:00:00.000Z</published>
    <updated>2016-11-10T07:17:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="No-Servers"><a href="#No-Servers" class="headerlink" title="No Servers?"></a>No Servers?</h3><p>We believe that the best DevOps is <strong>NoOps</strong>.Nothing against DevOps or DevOps people. On the contrary, but we think we could do differently!</p><p>Instead of spending time on setting up virtual machines and maintaining them, we setup our stack directly on different services – leaving ourselves more time to work on great features.</p><p><strong>locize</strong> gave us a chance to have a look around at new paths for building long lasting components.</p><p>We used a set of AWS solutions:</p><ul><li><a href="https://aws.amazon.com/dynamodb" target="_blank" rel="external">AWS DynamoDB</a></li><li><a href="https://aws.amazon.com/de/cloudfront" target="_blank" rel="external">AWS CloudFront CDN</a></li><li><a href="https://aws.amazon.com/s3" target="_blank" rel="external">AWS Simple Storage Service S3</a></li></ul><p>but specifically:</p><ul><li><a href="https://aws.amazon.com/api-gateway" target="_blank" rel="external">AWS API Gateway</a></li><li><a href="https://aws.amazon.com/lambda" target="_blank" rel="external">AWS Lambda</a></li></ul><h3 id="Amazon-Lambda"><a href="#Amazon-Lambda" class="headerlink" title="Amazon Lambda"></a>Amazon Lambda</h3><p><a href="https://aws.amazon.com/lambda" target="_blank" rel="external">AWS Lambda</a> is a compute service where you can upload your code to AWS Lambda and the service can run the code on your behalf using AWS infrastructure.All this without the hassle of own virtual machines, containers or any infrastructure for that matter.It integrates very well with <a href="https://aws.amazon.com/s3" target="_blank" rel="external">S3</a> <em>(where we serve the localized files)</em> and with <a href="https://aws.amazon.com/dynamodb" target="_blank" rel="external">DynamoDB</a> <em>(our main work storage)</em>.We don’t have to worry about scaling, multi-server communication and other problems related to distributed systems.We use the <a href="https://nodejs.org" target="_blank" rel="external">node.js</a> runtime for all our lambda functions.<img src="https://nodejs.org/static/images/logos/nodejs-new-pantone-black.png" alt="" title="node.js"></p><h3 id="Amazon-API-Gateway"><a href="#Amazon-API-Gateway" class="headerlink" title="Amazon API Gateway"></a>Amazon API Gateway</h3><p><a href="https://aws.amazon.com/api-gateway" target="_blank" rel="external">AWS API Gateway</a> lets you create a RESTful API to expose selected back-end features. The back end can be another AWS service, such as <a href="https://aws.amazon.com/lambda" target="_blank" rel="external">AWS Lambda</a> or <a href="https://aws.amazon.com/dynamodb" target="_blank" rel="external">AWS DynamoDB</a>, or it can be an existing web application.</p><h3 id="Below-you-can-see-how-locize-uses-this-services"><a href="#Below-you-can-see-how-locize-uses-this-services" class="headerlink" title="Below you can see how locize uses this services"></a>Below you can see how <strong>locize</strong> uses this services</h3><p><img src="aws.png" alt="" title="locize © inweso GmbH"></p><h3 id="What-about-the-client-side"><a href="#What-about-the-client-side" class="headerlink" title="What about the client side?"></a>What about the client side?</h3><p>In an other blog post ;-)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;No-Servers&quot;&gt;&lt;a href=&quot;#No-Servers&quot; class=&quot;headerlink&quot; title=&quot;No Servers?&quot;&gt;&lt;/a&gt;No Servers?&lt;/h3&gt;&lt;p&gt;We believe that the best DevOps is &lt;</summary>
      
    
    
    
    <category term="Post" scheme="http://blog.locize.com/categories/Post/"/>
    
    
    <category term="technology" scheme="http://blog.locize.com/tags/technology/"/>
    
    <category term="backend" scheme="http://blog.locize.com/tags/backend/"/>
    
    <category term="aws" scheme="http://blog.locize.com/tags/aws/"/>
    
    <category term="service" scheme="http://blog.locize.com/tags/service/"/>
    
  </entry>
  
  <entry>
    <title>day zero - how all began</title>
    <link href="http://blog.locize.com/2016-02-27-day-zero/"/>
    <id>http://blog.locize.com/2016-02-27-day-zero/</id>
    <published>2016-02-26T23:00:00.000Z</published>
    <updated>2016-11-10T07:17:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Back-in-2011"><a href="#Back-in-2011" class="headerlink" title="Back in 2011"></a>Back in 2011</h3><p>All started back in 2011 when we were in search for a internationalization library that meets our demand - allowing to run both on serverside node.js and on our clientside singlepage applications. <a href="http://www.i18next.com" target="_blank" rel="external">I18next</a> was born and fastly grown to one of the most used frameworks for translating webapplications and in node.js. The response of the community was amazing and a fast growing ecosystem established itself around i18next.</p><h3 id="internationalization-is-not-enough"><a href="#internationalization-is-not-enough" class="headerlink" title="internationalization is not enough"></a>internationalization is not enough</h3><p>Our community provided us with great feedback. Out of that response and our own experiences we learnt providing instrumentation for doing proper internationalization just is not enough.</p><p>Helping developers to get their applications translated is great - but there is more to it.</p><ul><li>How do you integrate any translation services / agency?</li><li>How do you keep track of new or removed content?</li><li>How you handle proper versioning?</li><li>How you deploy translation changes without deploying your complete application?</li></ul><h3 id="locize-to-the-rescue"><a href="#locize-to-the-rescue" class="headerlink" title="locize to the rescue"></a>locize to the rescue</h3><p>Having created the foundation with <strong>i18next</strong> it was a long journey to <strong>localization as a service</strong>.</p><p>But the journey ends this year with <strong>locize</strong>.</p><ul><li>Easy to integrate</li><li>Order professional translations</li><li>Analytics &amp; Statistics</li><li>Profit from our content delivery network</li><li>Versioning of your translations</li><li>Riskfree: Take your data with you</li><li>Transparent and fair pricing</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Back-in-2011&quot;&gt;&lt;a href=&quot;#Back-in-2011&quot; class=&quot;headerlink&quot; title=&quot;Back in 2011&quot;&gt;&lt;/a&gt;Back in 2011&lt;/h3&gt;&lt;p&gt;All started back in 2011 when </summary>
      
    
    
    
    <category term="Post" scheme="http://blog.locize.com/categories/Post/"/>
    
    
    <category term="i18next" scheme="http://blog.locize.com/tags/i18next/"/>
    
    <category term="beginning" scheme="http://blog.locize.com/tags/beginning/"/>
    
  </entry>
  
</feed>
